Group: Nick Randall, Matt Stierhoff, Zach Goodwyn, Sahar Alkhelaifi
Software: Python Checker
Written By: Nick Randall

Why it did not get finished.
	As you have probably seen based on our presentation, we were unable to finish the Python Checker program. Several key issues came up while we were developing this program that hindered our progress. The following reasons are the key reasons as to why we did not finish: “It worked on my machine” issue, general inexperience, underestimation in development phase, IT issues, and difficulty finding bugs. I will admit, without the majority of these issues, I believe we should have actually been able to finish up this software, however it did not happen.
“It Worked on My Machine”
	During the development phase of this project, we had a significant issue in our software that happened between an individual and the rest of the group. The CSS and HTML managed to work on his laptop, but when we needed to move it to nitrous, it was unable to successfully load and work. Because of this, we had to take a team member, who was supposed to be helping with the functionality, and he had to completely go over the HTML and CSS to try to get it to work. This meant that we lost some man power for getting the work done.
General Inexperience 
	On the Admin side of the project, I can say that we had a lot of inexperience with using flask and python to successfully develop working parts of the software. While we managed to get a few parts running, the amount of time used to even get those parts that did work was far too much time. Going into this with only a semester’s amount of time working with flask and python was not the greatest idea. When it came time to show what we had, we had accomplished very little, and going into the testing phase, if I recall correctly, only one person was working on the admin side. I must also note that the inexperience was on the admin development side of the software.
Underestimation in Development Phase
	As a group, we completely underestimated the amount of days needed to allocate to each task of the software. When we first started, this seemed like a completely easy project, but the further we progressed into the project, the more complicated it became. We found that there were all sorts of bugs, and issues that we had to work around. This and the combination of general inexperience gave us a significant reduction in our development phase. We should have adjusted earlier since most of us had only a little experience with flask, and one team member actually had no experience with the environment we were using.
IT Issues
	Among many problems we had, we were unable to actually work on rosemary for one part of the project. Because of server issues, we were not fully granted the permissions we needed to gain access to databases. Because of this, we had to use a different environment for the admin side of the project (Nitrous), which is similar to rosemary, but not entirely the same. Furthermore, because of the lack of communication we had with IT, we could not tell when we actually were on the list of users that could use databases. This meant that the night before the development phase ended, we spent a lot of time trying to get everything on rosemary, which ended up costing us some additional work, which could have been used on the admin side of development.
Difficult Bugs
	Once we managed to finally get the admin side to a workable state, I found multiple bugs that hindered progress in development. I spent far too much time trying to find the bugs in the first place. Overall, on the admin side, more time was spent trying to find those bugs rather than further development. Again, I speak from the position of the person who developed the admin side and assisted in testing it.
Conclusion
	While I could say we had a time issue, we really did not. This project did have some serious difficulties as we continued developing it, but I feel that if we did not have many of the above mention things (primarily the “It worked on my machine,” IT Issues, underestimation, and General Inexperience) we should have been able to get this working. Knowing what I know now, I certainly would have adjusted much earlier to try to compensate for many of these difficulties.  
